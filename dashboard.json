{
  "metadata": {
    "totalProblems": 1,
    "lastUpdated": "2025-08-27T09:52:18.557Z",
    "breakdown": {
      "Codechef": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      },
      "Gfg": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      },
      "Leetcode": {
        "total": 1,
        "Easy": 1,
        "Medium": 0,
        "Hard": 0
      },
      "Hackerrank": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      }
    }
  },
  "problems": [
    {
      "id": "leetcode-easy-two-sum",
      "platform": "Leetcode",
      "difficulty": "Easy",
      "problemName": "Two Sum",
      "language": "python",
      "files": {
        "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        num_to_index = {}\n        \n        for i, n in enumerate(nums):\n            n2 = target - n\n            if n2 in num_to_index:\n                return [num_to_index[n2], i]\n            num_to_index[n] = i\n        \n        return []  # Return an empty list if no solution is found",
        "readme": "ArrayHashTable\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n\n \nConstraints:\n\n\n\t2 <= nums.length <= 104\n\t-109 <= nums[i] <= 109\n\t-109 <= target <= 109\n\tOnly one valid answer exists.\n\n\n \nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
        "notes": "Two Sum\n\n          - Summary: The algorithm uses a hash map (dictionary in Python) to store numbers and their indices. It iterates through the input array `nums`. For each number, it calculates the complement needed to reach the `target`. If the complement is found in the hash map, it means a pair adding up to the target has been found, and their indices are returned. Otherwise, the current number and its index are added to the hash map, and the iteration continues. If no solution is found after iterating through all numbers, an empty list is returned.\n\n          - Time Complexity: O(n) because the algorithm iterates through the input array once.  Hash map lookups have an average time complexity of O(1).\n          - Space Complexity: O(n) because in the worst-case scenario, the hash map will store all numbers from the input array, resulting in space proportional to the input size."
      },
      "hasCode": true,
      "hasReadme": true,
      "hasNotes": true,
      "lastUpdated": "2025-08-27T09:52:18.555Z"
    }
  ]
}